{
    "contents" : "# extracts the necessary data using the cohortid\n\nextractData <- function(dbconnection, cdmDatabaseSchema, workDatabaseSchema,\n                        cohortid, agegroup, gender,\n                        type=c('history', 'stats'), method='kmeans')\n{\n  #loc <- file.path(.libPaths(), 'patientCluster','libs','x64')\n  loc <- file.path(getwd(), 'src')\n\n  # do checks for input\n  writeLines('Checking input...')\n  # .checkData()\n  # if fails write error message\n\n  # extract the data into ffdf\n  writeLines('Extracting data...')\n  conn <- connect(dbconnection)\n  sql <- readSql(file.path(loc,'count_extractor.sql'))\n  sql <- renderSql(sql,\n                   database = cdmDatabaseSchema,\n                   outDatabase = workDatabaseSchema,gender=gender, ageupper=age[agegroup,2], agelower=age[agegroup,1],\n                   cohortID = cohortID)$sql\n  sql <- translateSql(sql = sql, sourceDialect = \"sql server\", targetDialect = sqlType)$sql\n  writeSql(sql, file.path(outputfolder,\"rendered_count_extractor.sql\"))\n  result <- querySql(conn, sql)\n  dbDisconnect(conn)\n  if(length(result)<1){result <- 0}\n\n  # output results and progress to user\n  writeLines(paste('Found ',as.double(result[1]),' distinct patients in cohort_id ',cohortID,' in age and gender stratum', sep=''))\n  writeLines(ifelse(as.double(result[1])>1, 'Enough patients... Extracting Data', 'not Enough patients... Terminating') )\n  if(result[1]==0){return()}\n\n  # extract definitions of interest into table: rows of definition, concept_id\n  definitions <- read.table(file.path(loc,'definitions.txt'), sep=':')\n  definitions <- cbind(strsplit(paste(apply(definitions, 1, function(x)\n      paste(rep(x[1],length(strsplit(as.character(x[2]),',')[[1]])), collapse=':')),collapse=':'),':')[[1]]\n    ,strsplit(paste(as.character(definitions[,2]), collapse=','),',')[[1]])\n  colnames(definitions) <- c('covariate','concept_id')\n\n  # load this table into the sql table named covariates in outputdatabase\n  dbconnection2 <- dbconnection\n  dbconnection2$schema <- workDatabaseSchema\n  conn2 <- connect(dbconnection2)\n  insertTable(conn2, tableName, data, dropTableIfExists = TRUE,\n              createTable = TRUE, tempTable = FALSE, oracleTempSchema = NULL)\n  dbDisconnect(conn2)\n\n    # extracting features\n    conn <- connect(dbconnection)\n    sql <- readSql(file.path(loc,paste(type,'cohortCluster.sql', sep='')))\n    sql <- renderSql(sql,\n                     database = cdmDatabaseSchema, outDatabase = workDatabaseSchema,\n                     gender=gender, ageupper=age[agegroup,2], agelower=age[agegroup,1],\n                     cohortID = cohortID, definitions=...,\n                     history = history,\n                     definitionNames= paste('[',unique(definitions[,1]),']', sep='',collapse=','))$sql\n    sql <- translateSql(sql = sql, sourceDialect = \"sql server\", targetDialect = sqlType)$sql\n    writeSql(sql, file.path(input.loc, paste(\"rendered_\",type,\"_extraction.sql\")))\n    clust.data <- as.ffdf(querySql(conn, sql))\n    writeLines('Data extracted ...')\n\n    # save the data to output folder\n    if(!dir.path(getwd(),cohortid,'extractedData',type)){dir.create(dir.path(getwd(),cohortid,'extractedData',type))}\n    save.ffdf(clust.data, file.path(getwd(),cohortid,'extractedData',type, paste(agegroup,'_',gender, sep='')))\n    dbDisconnect(conn)\n}\n\n\n\nconnectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,\n                                                                server = server,\n                                                                user = user,\n                                                                password = pw,\n                                                                port = port,\n                                                                schema = cdmDatabaseSchema)\n\nextractData()\n\n",
    "created" : 1444649747777.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1584447723",
    "id" : "D372A736",
    "lastKnownWriteTime" : 1444644016,
    "path" : "~/patientCluster/patientCluster/R/dataExtract.R",
    "project_path" : "R/dataExtract.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}